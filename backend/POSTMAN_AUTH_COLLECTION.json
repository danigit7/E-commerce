{
  "info": {
    "name": "E-commerce Authentication API",
    "description": "Complete JWT authentication endpoints with access and refresh tokens",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "1. Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('userId', response._id);",
                  "    pm.test('Status code is 201', () => {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "    pm.test('Response has accessToken', () => {",
                  "        pm.expect(response).to.have.property('accessToken');",
                  "    });",
                  "    pm.test('Response has user data', () => {",
                  "        pm.expect(response).to.have.property('_id');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('name');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": []
        },
        {
          "name": "2. Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('userId', response._id);",
                  "    pm.test('Status code is 200', () => {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    pm.test('Response has accessToken', () => {",
                  "        pm.expect(response).to.have.property('accessToken');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password"
          },
          "response": []
        },
        {
          "name": "3. Get Current User (Me)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response has user data', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "Get authenticated user profile"
          },
          "response": []
        },
        {
          "name": "4. Verify Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Token is valid', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.valid).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify"]
            },
            "description": "Verify if access token is valid"
          },
          "response": []
        },
        {
          "name": "5. Refresh Access Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.test('Status code is 200', () => {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    pm.test('Response has new accessToken', () => {",
                  "        pm.expect(response).to.have.property('accessToken');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Get a new access token using refresh token (sent via HTTP-only cookie)"
          },
          "response": []
        },
        {
          "name": "6. Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Logout successful', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Logged out');",
                  "});",
                  "// Clear tokens",
                  "pm.environment.unset('accessToken');",
                  "pm.environment.unset('userId');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout user and clear refresh token cookie"
          },
          "response": []
        },
        {
          "name": "7. Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 500', () => {",
                  "    pm.expect([200, 500]).to.include(pm.response.code);",
                  "});",
                  "// Note: Returns 500 if email service is not configured"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Request password reset email"
          },
          "response": []
        },
        {
          "name": "8. Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 400', () => {",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"newPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password/:token",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password", ":token"],
              "variable": [
                {
                  "key": "token",
                  "value": "your_reset_token_here"
                }
              ]
            },
            "description": "Reset password using reset token (from email)"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints"
    },
    {
      "name": "Protected Routes Examples",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            },
            "description": "Example of a protected route"
          },
          "response": []
        },
        {
          "name": "Get Cart",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cart",
              "host": ["{{baseUrl}}"],
              "path": ["cart"]
            },
            "description": "Example of a protected cart route"
          },
          "response": []
        },
        {
          "name": "Get My Orders",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/my-orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "my-orders"]
            },
            "description": "Example of a protected orders route"
          },
          "response": []
        }
      ],
      "description": "Examples of protected routes that require authentication"
    },
    {
      "name": "Admin Routes Examples",
      "item": [
        {
          "name": "Get Admin Stats",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/stats",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "stats"]
            },
            "description": "Admin only route - requires admin role"
          },
          "response": []
        },
        {
          "name": "Get All Users (Admin)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            },
            "description": "Admin only route - get all users"
          },
          "response": []
        }
      ],
      "description": "Examples of admin-only routes (requires admin role)"
    },
    {
      "name": "Error Examples",
      "item": [
        {
          "name": "Login - Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Example of 401 error - invalid credentials"
          },
          "response": []
        },
        {
          "name": "Protected Route - No Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "Example of 401 error - no token provided"
          },
          "response": []
        },
        {
          "name": "Admin Route - Not Admin",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/stats",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "stats"]
            },
            "description": "Example of 403 error - user is not admin"
          },
          "response": []
        }
      ],
      "description": "Examples of error responses"
    }
  ]
}

